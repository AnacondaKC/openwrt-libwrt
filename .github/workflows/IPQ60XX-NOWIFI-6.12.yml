# ======================================================================================
# GitHub Actions Workflow: 编译 OpenWrt 固件 (最终修正版 v4)
#
# Workflow 名称:
#   IPQ60XX-6.12-NOWIFI
#
# 核心修正:
#   - 调整了步骤顺序，将 Checkout 操作移动到磁盘空间扩展之后，从根源上解决路径问题。
#   - 在最终执行步骤中加入了行内调试命令，作为最后保险。
#
# ======================================================================================

name: IPQ60XX-6.12-NOWIFI

on:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/LiBwrt/openwrt-6.x.git
  REPO_BRANCH: k6.12-nss
  CONFIG_FILE: configs/IPQ60XX-NOWIFI-6.12.config
  FEEDS_CONF_FILE: feeds/IPQ60XX-NOWIFI-6.12-feeds.txt
  DIY_SCRIPT: scripts/IPQ60XX-NOWIFI-6.12-settings.sh
  CLASH_KERNEL: amd64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: IPQ60XX-6.12-NOWIFI
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-22.04
    steps:
      # 步骤 1: 初始化编译环境与扩展空间 (先准备好环境)
      - name: Prepare Environment & Maximize Build Space
        run: |
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* >/dev/null 2>&1 || true
          sudo -E apt-get -y update
          sudo -E apt-get -y install $(curl -fsSL https://gist.githubusercontent.com/serverok/d8957ee906593952a1293a38f7149a0f/raw/34a4a15962137913ad27339035b34e2c011e5927/depends-ubuntu-2204)
          sudo timedatectl set-timezone "$TZ"
      - uses: easimon/maximize-build-space@master
        with:
          swap-size-mb: 1024
          root-reserve-mb: 1024

      # 步骤 2: 检出当前仓库代码 (在环境稳定后再检出)
      - name: Checkout repository code
        uses: actions/checkout@main

      # 步骤 3: 克隆 OpenWrt 源码并提取版本信息
      - name: Clone OpenWrt Source
        run: |
          git clone --depth 1 -b $REPO_BRANCH $REPO_URL openwrt
          echo "OPENWRT_PATH=$PWD/openwrt" >> $GITHUB_ENV
          VERSION_INFO=$(cd openwrt && git show -s --date=short --format="作者: %an<br/>时间: %cd<br/>内容: %s<br/>hash: %H")
          echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV
          VERSION_KERNEL=$(grep -oP 'LINUX_KERNEL_HASH-\K[0-9]+\.[0-9]+\.[0-9]+' openwrt/target/linux/generic/kernel-6.12)
          echo "VERSION_KERNEL=$VERSION_KERNEL" >> $GITHUB_ENV

      # 步骤 4: 加载自定义配置并执行脚本
      - name: Load Customizations & Run DIY Script
        run: |
          # 添加最终的行内调试命令，检查 configs 目录内容
          echo "Final check: Listing contents of 'configs' directory before use..."
          ls -l configs/

          echo "Applying custom .config to openwrt/.config..."
          if [ -f "$CONFIG_FILE" ]; then
            cp "$CONFIG_FILE" "openwrt/.config"
          else
            echo "ERROR: .config file not found at $CONFIG_FILE"
            exit 1
          fi

          echo "Applying custom feeds configuration to openwrt/feeds.conf.default..."
          if [ -f "$FEEDS_CONF_FILE" ]; then
            cp "$FEEDS_CONF_FILE" "openwrt/feeds.conf.default"
          fi
          
          echo "Updating and installing feeds inside 'openwrt' directory..."
          (cd openwrt && ./scripts/feeds update -a && ./scripts/feeds install -a)

          echo "Copying custom files from 'files' directory..."
          if [ -d "files" ]; then
            cp -r files openwrt/
          fi
          
          echo "Running DIY script..."
          if [ -f "$DIY_SCRIPT" ];then
            chmod +x "$DIY_SCRIPT"
            (cd openwrt && ../$DIY_SCRIPT)
          fi

      # 步骤 5: 生成最终 .config 文件
      - name: Generate Final .config
        run: |
          cd openwrt
          make defconfig

      # 步骤 6: 缓存工具链
      - name: Cache Toolchain
        if: env.CACHE_TOOLCHAIN == 'true'
        uses: HiGarfield/cachewrtbuild@main
        with:
          ccache: false
          mixkey: ${{ env.FIRMWARE_TAG }}-${{ env.REPO_BRANCH }}-${{ hashFiles(env.CONFIG_FILE) }}-${{ hashFiles(env.FEEDS_CONF_FILE) }}
          prefix: ${{ env.OPENWRT_PATH }}

      # 步骤 7: 下载源码包
      - name: Download DL Package
        run: |
          cd ${{ env.OPENWRT_PATH }}
          make download -j$(nproc)
          find dl -size -1024c -exec rm -f {} \;

      # 步骤 8: 编译固件
      - name: Compile Firmware
        id: compile
        run: |
          cd ${{ env.OPENWRT_PATH }}
          echo "Starting firmware compilation with $(nproc) threads..."
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
          echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV

      # 步骤 9: 整理文件并发布
      - name: Organize Files & Upload to Release
        if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
        uses: ncipollo/release-action@v1
        with:
          name: R${{ env.DATE }} for ${{ env.FIRMWARE_TAG }}
          allowUpdates: true
          tag: ${{ env.FIRMWARE_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifactErrorsFailBuild: true
          artifacts: ${{ env.OPENWRT_PATH }}/bin/targets/*/*/*
          body: |
            **This is OpenWrt Firmware for ${{ env.FIRMWARE_TAG }}**
            ### 📒 固件信息(无WIFI)
            - 无WIFI带有线NSS的6.12内核固件
            - 💻 这是 ${{ env.FIRMWARE_TAG }} 平台使用的 OpenWrt 固件
            - ⚽ 固件源码: ${{ env.REPO_URL }}
            - 💝 源码分支: ${{ env.REPO_BRANCH }}
            - 🌐 默认地址: 192.168.1.1
            - 🔑 默认密码: password
            ### 🧊 固件版本
            - 固件内核版本：${{ env.VERSION_KERNEL }}
            - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
            - ${{ env.VERSION_INFO }}
