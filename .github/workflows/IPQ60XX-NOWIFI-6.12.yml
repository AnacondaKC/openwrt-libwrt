# =================================================================
# OpenWrt 固件自动化编译工作流 (专业优化版)
# Profile: 兆能 M2 (IPQ60XX) - 纯旁路由无 WiFi
# =================================================================

name: Build OpenWrt for IPQ60XX-NOWIFI

on:
  # 允许手动从 Actions 页面触发
  workflow_dispatch:
    inputs:
      release_tag_suffix:
        description: '为本次 Release Tag 添加后缀 (可选)'
        required: false
        default: ''

# 工作流级别的环境变量
env:
  # 源码信息
  REPO_URL: https://github.com/LiBwrt/openwrt-6.x.git
  REPO_BRANCH: k6.12-nss

  # 配置文件与自定义文件路径 (相对于仓库根目录)
  CONFIG_FILE: configs/IPQ60XX-NOWIFI-6.12.config
  CUSTOM_FEEDS_CONF: feeds/IPQ60XX-NOWIFI-6.12-feeds.txt
  INIT_SETTINGS_SCRIPT: scripts/IPQ60XX-NOWIFI-6.12-settings.sh

  # 编译和发布选项
  CACHE_TOOLCHAIN: true
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: IPQ60XX-NOWIFI
  TZ: Asia/Shanghai

# 并发控制：确保同一分支下只有一个工作流在运行，新的触发会取消旧的。
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Build:
    # 使用 GitHub 提供的最新版 Ubuntu Runner
    runs-on: ubuntu-22.04

    steps:
    # 步骤 1: 环境准备 - 检出当前仓库代码
    - name: 1. Checkout Workflow Repo
      # 锁定到主版本号，确保稳定性
      uses: actions/checkout@v4

    # 步骤 2: 环境准备 - 优化 Runner 环境
    - name: 2. Initialize Build Environment
      env:
        # APT 非交互模式
        DEBIAN_FRONTEND: noninteractive
      run: |
        # 设置时区
        sudo timedatectl set-timezone "$TZ"
        # 安装编译所需的所有依赖包
        sudo apt-get update
        sudo apt-get -y install $(curl -fsSL [https://git.io/depends-ubuntu-2204](https://git.io/depends-ubuntu-2204))
        sudo apt-get autoremove --purge
        sudo apt-get clean

    # 步骤 3: 环境准备 - 扩展磁盘空间
    - name: 3. Maximize Build Space
      uses: easimon/maximize-build-space@v7
      with:
        # 清理出更多空间
        root-reserve-mb: 4096
        swap-size-mb: 1024
        remove-dotnet: 'true'
        remove-android: 'true'

    # 步骤 4: 源码处理 - 克隆 OpenWrt 源码并提取信息
    - name: 4. Clone OpenWrt Source
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        # 将 openwrt 路径设为全局变量，供后续步骤使用
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        # 提取最新 commit 信息用于 Release Note
        VERSION_INFO=$(git show -s --date=format:"%Y-%m-%d" --format="**作者:** %an%n**时间:** %cd%n**内容:** %s%n**Hash:** %H")
        echo "VERSION_INFO<<EOF" >> $GITHUB_ENV
        echo "$VERSION_INFO" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        # 提取目标平台的内核版本号
        VERSION_KERNEL=$(grep -oP 'LINUX_KERNEL_HASH-\K[0-9]+\.[0-9]+' target/linux/qualcommax/Makefile | head -n 1)
        echo "VERSION_KERNEL=$VERSION_KERNEL" >> $GITHUB_ENV

    # 步骤 5: 配置处理 - 加载自定义配置并生成最终 .config
    - name: 5. Load Custom Content and Prepare Config
      run: |
        cd ${{ env.OPENWRT_PATH }}
        
        echo "》正在加载自定义 Feeds..."
        if [ -f "${{ github.workspace }}/${{ env.CUSTOM_FEEDS_CONF }}" ]; then
          cp "${{ github.workspace }}/${{ env.CUSTOM_FEEDS_CONF }}" ./feeds.conf.default
        else
          echo "警告：未找到自定义 Feeds 配置文件: ${{ env.CUSTOM_FEEDS_CONF }}"
        fi

        echo "》正在加载初始化脚本..."
        if [ -f "${{ github.workspace }}/${{ env.INIT_SETTINGS_SCRIPT }}" ]; then
          mkdir -p ./files/etc/uci-defaults
          cp "${{ github.workspace }}/${{ env.INIT_SETTINGS_SCRIPT }}" ./files/etc/uci-defaults/99-init-settings
        else
          echo "警告：未找到初始化脚本: ${{ env.INIT_SETTINGS_SCRIPT }}"
        fi
        
        echo "》正在加载核心编译配置..."
        if [ -f "${{ github.workspace }}/${{ env.CONFIG_FILE }}" ]; then
          cp "${{ github.workspace }}/${{ env.CONFIG_FILE }}" ./.config
        else
          echo "致命错误：找不到核心配置文件: ${{ env.CONFIG_FILE }}"
          exit 1
        fi
        
        echo "》正在更新与安装 Feeds..."
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
        echo "》正在生成最终 .config 文件..."
        # 关键步骤：根据 .config 中的选择，自动计算并补全都依赖项
        make defconfig

    # 步骤 6: 缓存处理 - 设置缓存
    - name: 6. Cache Toolchain
      if: env.CACHE_TOOLCHAIN == 'true'
      # 锁定到具体的 Action 版本
      uses: HiGarfield/cachewrtbuild@v3.0.1
      with:
        # 缓存键值，结合了源码、分支、目标平台和配置哈希，确保缓存精准
        mixkey: ${{ env.REPO_BRANCH }}-${{ env.TZ }}-${{ secrets.CONFIG_HASH_SALT }}-${{ hashFiles(format('{0}/{1}', github.workspace, env.CONFIG_FILE)) }}
        # 缓存目录
        prefix: ${{ env.OPENWRT_PATH }}

    # 步骤 7: 编译准备 - 下载源码包
    - name: 7. Download DL Packages
      run: |
        cd ${{ env.OPENWRT_PATH }}
        make download -j$(nproc)
        # 移除可能导致问题的空文件或损坏文件
        find dl -size -1024c -exec rm -f {} \;

    # 步骤 8: 核心任务 - 编译固件
    - name: 8. Compile Firmware
      id: compile
      run: |
        cd ${{ env.OPENWRT_PATH }}
        echo "开始 $(nproc) 线程编译..."
        make -j$(nproc) || make -j1 V=s
        # 设置状态输出，供后续步骤判断
        echo "status=success" >> $GITHUB_OUTPUT
        echo "BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%S%z")" >> $GITHUB_ENV
        echo "RELEASE_DATE=$(date -d "0 hour" +"%Y.%m.%d")" >> $GITHUB_ENV

    # 步骤 9: 后续处理 - 整理固件文件
    - name: 9. Organize Files for Release
      if: steps.compile.outputs.status == 'success'
      run: |
        # 动态获取固件目录路径
        FIRMWARE_DIR="${{ env.OPENWRT_PATH }}/bin/targets/$(grep -oP 'CONFIG_TARGET_BOARD="\K[^"]+' .config)/$(grep -oP 'CONFIG_TARGET_SUBTARGET="\K[^"]+' .config)"
        echo "FIRMWARE_PATH=${FIRMWARE_DIR}" >> $GITHUB_ENV
        cd ${FIRMWARE_DIR}
        # 备份本次编译使用的最终 .config 文件
        cp ${{ env.OPENWRT_PATH }}/.config build.config
        # 清理不需要上传的杂项文件，使用通配符确保清理干净
        rm -f packages *sha256sums *buildinfo

    # 步骤 10: 最终交付 - 上传固件到 Release
    - name: 10. Upload Firmware to Release
      if: success() && env.FIRMWARE_RELEASE == 'true'
      # 锁定到主版本号
      uses: ncipollo/release-action@v1.14.0
      with:
        # 允许更新已存在的 Release
        allowUpdates: true
        # 草稿模式，发布前可以最后检查
        draft: false
        # 正式发布
        prerelease: false
        # 动态生成 Release 名称
        name: ${{ env.FIRMWARE_TAG }} - ${{ env.RELEASE_DATE }}${{ inputs.release_tag_suffix && format(' - {0}', inputs.release_tag_suffix) || '' }}
        # 固定的 Release Tag，方便持续更新
        tag: ${{ env.FIRMWARE_TAG }}
        # 授权 Token
        token: ${{ secrets.GITHUB_TOKEN }}
        # 要上传的文件路径
        artifacts: ${{ env.FIRMWARE_PATH }}/*
        # Release 的详细描述，使用 Markdown 格式
        body: |
          ## OpenWrt 固件 for 兆能 M2 (ZN-M2)
          - **编译时间:** `${{ env.BUILD_TIME }}`
          - **固件平台:** `${{ env.FIRMWARE_TAG }}`
          - **OpenWrt 内核:** `${{ env.VERSION_KERNEL }}`
          ---
          ### 核心特性
          - **硬件平台:** Qualcomm IPQ60xx
          - **核心功能:** HomeProxy 代理 + SmartDNS
          - **硬件加速:** 完全启用 NSS 网络硬件加速
          - **精简方向:** 彻底移除 Wi-Fi 与 USB 相关所有功能，纯有线旁路由
          - **默认设置:** IP 地址、密码等由 `INIT_SETTINGS_SCRIPT` 脚本定义
          ---
          ### 源码信息
          ```
          - 源码地址: ${{ env.REPO_URL }}
          - 源码分支: ${{ env.REPO_BRANCH }}
          ```
          ### 本次构建基于的最后一次 Commit
          ```
          ${{ env.VERSION_INFO }}
          ```
