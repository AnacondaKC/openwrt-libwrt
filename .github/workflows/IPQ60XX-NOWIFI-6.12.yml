# ======================================================================================
# GitHub Actions Workflow: 编译 OpenWrt 固件
#
# Workflow 名称:
#   IPQ60XX-6.12-NOWIFI
# ======================================================================================

name: IPQ60XX-6.12-NOWIFI

on:
  workflow_dispatch:

# --------------------------------------------------------------------------------------
# 全局环境变量设置
# --------------------------------------------------------------------------------------
env:
  # OpenWrt 源码仓库地址
  REPO_URL: https://github.com/LiBwrt/openwrt-6.x.git
  # OpenWrt 源码分支
  REPO_BRANCH: k6.12-nss
  # 固件配置文件路径
  CONFIG_FILE: configs/IPQ60XX-NOWIFI-6.12.config
  # 自定义 Feeds 源文件路径
  FEEDS_CONF_FILE: feeds/IPQ60XX-NOWIFI-6.12-feeds.txt
  # 自定义脚本路径
  DIY_SCRIPT: scripts/IPQ60XX-NOWIFI-6.12-settings.sh
  # Clash 核心架构
  CLASH_KERNEL: amd64
  # 是否启用工具链缓存
  CACHE_TOOLCHAIN: true
  # 是否上传完整的 'bin' 目录
  UPLOAD_BIN_DIR: false
  # 是否发布固件到 GitHub Releases
  FIRMWARE_RELEASE: true
  # GitHub Release 和 Artifact 的标签
  FIRMWARE_TAG: IPQ60XX-6.12-NOWIFI
  # 设置编译环境时区
  TZ: Asia/Shanghai

# --------------------------------------------------------------------------------------
# 编译任务 (Job) 定义
# --------------------------------------------------------------------------------------
jobs:
  Build:
    runs-on: ubuntu-22.04

    steps:
      # 步骤 1: 检出当前仓库代码 (包含 workflow, config, diy-script 等)
      - name: Checkout
        uses: actions/checkout@main

      # 步骤 2: 初始化编译环境与扩展空间
      - name: Initialize Environment & Maximize Build Space
        run: |
          echo "Initializing build environment and maximizing space..."
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* >/dev/null 2>&1 || true
          sudo -E apt-get -y update
          sudo -E apt-get -y install $(curl -fsSL https://gist.githubusercontent.com/serverok/d8957ee906593952a1293a38f7149a0f/raw/34a4a15962137913ad27339035b34e2c011e5927/depends-ubuntu-2204)
          sudo timedatectl set-timezone "$TZ"
          # 使用 action 扩展磁盘空间
      - uses: easimon/maximize-build-space@master
        with:
          swap-size-mb: 1024
          root-reserve-mb: 1024

      # 步骤 3: 克隆 OpenWrt 源码并提取版本信息
      - name: Clone Source Code
        run: |
          echo "Cloning OpenWrt source code from $REPO_URL branch $REPO_BRANCH..."
          git clone --depth 1 -b $REPO_BRANCH $REPO_URL openwrt
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          VERSION_INFO=$(git show -s --date=short --format="作者: %an<br/>时间: %cd<br/>内容: %s<br/>hash: %H")
          echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV
          VERSION_KERNEL=$(grep -oP 'LINUX_KERNEL_HASH-\K[0-9]+\.[0-9]+\.[0-9]+' target/linux/generic/kernel-6.12)
          echo "VERSION_KERNEL=$VERSION_KERNEL" >> $GITHUB_ENV

      # 步骤 4: [流程优化] 加载自定义配置并执行脚本
      - name: Load Customizations & Run DIY Script
        run: |
          cd $OPENWRT_PATH

          echo "Applying custom feeds configuration from $FEEDS_CONF_FILE..."
          if [ -f "$GITHUB_WORKSPACE/$FEEDS_CONF_FILE" ]; then
            cp "$GITHUB_WORKSPACE/$FEEDS_CONF_FILE" feeds.conf.default
          else
            echo "Custom feeds file not found, using default."
          fi
          
          echo "Updating and installing feeds..."
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
          echo "Applying custom .config from $CONFIG_FILE..."
          if [ -f "$GITHUB_WORKSPACE/$CONFIG_FILE" ]; then
            cp "$GITHUB_WORKSPACE/$CONFIG_FILE" .config
          else
            echo "ERROR: .config file not found at $CONFIG_FILE"
            exit 1
          fi

          echo "Copying custom files from 'files' directory..."
          if [ -d "$GITHUB_WORKSPACE/files" ]; then
            mv "$GITHUB_WORKSPACE/files" "$OPENWRT_PATH/"
          fi
          
          echo "Running DIY script: $DIY_SCRIPT..."
          if [ -f "$GITHUB_WORKSPACE/$DIY_SCRIPT" ]; then
            chmod +x "$GITHUB_WORKSPACE/$DIY_SCRIPT"
            "$GITHUB_WORKSPACE/$DIY_SCRIPT"
          else
            echo "DIY script not found, skipping."
          fi

      # 步骤 5: [流程优化] 生成最终 .config 文件
      - name: Generate Final .config
        run: |
          cd $OPENWRT_PATH
          echo "Generating final .config file..."
          make defconfig

      # 步骤 6: [缓存优化] 缓存工具链 (Key 关联配置文件哈希)
      - name: Cache Toolchain
        if: env.CACHE_TOOLCHAIN == 'true'
        uses: HiGarfield/cachewrtbuild@main
        with:
          ccache: false
          # 新的 mixkey 包含了对配置文件的 hash 计算，确保配置改变后缓存失效
          mixkey: ${{ env.FIRMWARE_TAG }}-${{ env.REPO_BRANCH }}-${{ hashFiles(env.CONFIG_FILE) }}-${{ hashFiles(env.FEEDS_CONF_FILE) }}
          prefix: ${{ env.OPENWRT_PATH }}

      # 步骤 7: 下载源码包 (已移除冗余的 defconfig)
      - name: Download DL Package
        run: |
          cd $OPENWRT_PATH
          echo "Downloading source packages..."
          make download -j$(nproc)
          # 检查并删除下载不完整的文件
          find dl -size -1024c -exec rm -f {} \;

      # 步骤 8: 编译固件
      - name: Compile Firmware
        id: compile
        run: |
          cd $OPENWRT_PATH
          echo "Starting firmware compilation with $(nproc) threads..."
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
          echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV

      # 步骤 9: 整理文件并发布
      - name: Organize Files & Upload to Release
        if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
        run: |
          echo "Organizing files for release..."
          cd ${{ env.OPENWRT_PATH }}/bin/targets/*/*
          rm -f sha256sums
          cp ${{ env.OPENWRT_PATH }}/.config build.config
          # 如果需要打包所有 .ipk 软件, 取消下面两行注释
          # mv -f ${{ env.OPENWRT_PATH }}/bin/packages/*/*/*.ipk packages
          # tar -zcf Packages.tar.gz packages
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
      - name: Upload Firmware To Release
        if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
        uses: ncipollo/release-action@v1
        with:
          name: R${{ env.DATE }} for ${{ env.FIRMWARE_TAG }}
          allowUpdates: true
          tag: ${{ env.FIRMWARE_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.FIRMWARE_PATH }}/*
          body: |
            **This is OpenWrt Firmware for ${{ env.FIRMWARE_TAG }}**
            ### 📒 固件信息(无WIFI)
            - 无WIFI带有线NSS的6.12内核固件
            - 💻 这是 ${{ env.FIRMWARE_TAG }} 平台使用的 OpenWrt 固件
            - ⚽ 固件源码: ${{ env.REPO_URL }}
            - 💝 源码分支: ${{ env.REPO_BRANCH }}
            - 🌐 默认地址: 192.168.1.1
            - 🔑 默认密码: password
            ### 🧊 固件版本
            - 固件内核版本：${{ env.VERSION_KERNEL }}
            - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
            - ${{ env.VERSION_INFO }}
